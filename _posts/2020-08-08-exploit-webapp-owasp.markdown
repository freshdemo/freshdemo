---
layout: post
date:   2020-08-08 12:27:35 -0400
title:  "Web Server Compromise - OWASP"
categories: initialaccess
tags: vulnerabilityprotection
---
<p>
Remotely exploiting servers in DMZ's seems so unecessary today with all of the credential theft and client side exploitation, but it is still a critical link in the attack chain. Cloud initiatives are allowing administrators to start up servers all over the place, and most of the time they do not have the same protections in the cloud they typically would in the DMZ. This attack could also be applied for lateral movement if the vulnerable web application is only accessible internally.
</p>

<h3>Step 1 - Deploy Damn Vulnerable Web Application</h3>

<p>
Typically I like to build my own docker containers from scratch rather than deploying an already built container because you don't know what people are putting in their containers. In this particular case the container is maintained by the author of DVWA so rather than building a new one from scratch we will use theirs.
</p>
<p>
For more options and description see <a href="https://freshdemo.github.io//infrastructure/2020/03/16/infrastructure-dvwa.html" target="_blank">https://freshdemo.github.io//infrastructure/2020/03/16/infrastructure-dvwa.html</a>

<br>
<br>
<code>
  docker run --rm -it -p 80:80 vulnerables/web-dvwa
</code>
<br>
<br>
<p>
Once the container has started navigate to your new vulnerable web application.
</p>
<br>
<br>

<code>
 http://ip.address
</code>
<br>
<br>
<p>
The default credentials are <b>admin:password</b>. You may have to click the <b>Setup/Reset DB</b> option and then click the same named button at the bottom of the page.
</p>
<br>
<br>


<h3>Step 2 - Run Nikto</h3>

<p>
Nikto has been around for a long time from a software perspective but is still a great tool for web application testing.
</p>

<p>
Run nikto
<p>
<code>
  nikto -host http://13.88.250.188/vulnerabilities/ -id admin:password
</code>
<br>
<br>
<img src="/images/exploit-webapp-nikto.png">

<br>
<br>

<h3>Step 2 (Optional) - Setup ZAP (more cumbersome but better for manual testing)</h3>

<p>
Zed Attack Proxy is a very good web application testing program. We will be using it very rudimentarily just to generate some alerts.
</p>

<p>
Because DVWA requires authentication we will need to configure ZAP to authenticate to the app. In order to do that we need to intercept a login and save it in the ZAP context so that when ZAP is confronted with a login page it will use the credentials supplied.
</p>

<p>
You should have a copy of Kali deployed somewhere, https://www.kali.org/. There are several web application security tools that come installed. If you don't have it download the image and instantiate the VM on the other side of your DUT (Device Under Testing) as the DVWA you deployed in step 1.
</p>

<p>
Start ZAP
</p>
<br>
<br>
<img src="/images/exploit-webapp-kalimenu.png">
<br>
<br>

<p>
Configure the local proxy settings for ZAP
</p>
<br>
<br>
<img src="/images/exploit-webapp-kalioptions.png">
<br>
<br>

<p>
Configure your web browser to proxy all traffic through ZAP. Make sure you use the same port in ZAP and the browser.
</p>
<br>
<br>
<img src="/images/exploit-webapp-kaliproxy.png">
<br>
<br>

<p>
Browse to the IP address of your DVWA. You may get an SSL warning, which you can accept. Login with <b>admin:password</b>.
</p>

<p>
From the following page click the button at the bottom, Create / Reset DB
</p>
<br>
<br>
<img src="/images/exploit-webapp-kalidvwa.png">
<br>
<br>


<p>
Back in ZAP, add the login credentials to the default context. From the navigation tree right click on the login POST and Include in context
<p>
<br>
<br>
<img src="/images/exploit-webapp-context.png">
<br>
<br>


<p>
Edit the credentials so that they look like this
</p>
<br>
<br>
<img src="/images/exploit-webapp-creds.png">
<br>
<br>


<p>
From the tree on the left, right click on the IP of DVWA, Attack, and Active Scan
</p>
<br>
<br>
<img src="/images/exploit-webapp-attack.png">
<br>
<br>


<h3>Step 3 - View the Results</h3>


<p>
Because there will be lots of alerts we will use a custom report looking in the Threat Database for the source IP address for the last hour.
</p>
<br>
<br>
<img src="/images/exploit-webapp-report.png" alt="ngfw">
<br>
<br>

<p>
There will be a bunch of web based threats in multiple categories.
</p>
<p>
Here are the results from Nikto. There were so many that the report had to be exported.
</p>
<br>
<br>
<img src="/images/exploit-webapp-niktoresults1.png">
<img src="/images/exploit-webapp-niktoresults2.png">
<br>
<br>
<p>
These are the results from a ZAP scan.
</p>
<br>
<br>
<img src="/images/exploit-webapp-zapresults.png">




